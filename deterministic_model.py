# -*- coding: utf-8 -*-
"""Deterministic Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mYu0aOCiFeosvo3P1CfVSWGSkCqBpIRl
"""

import numpy as np 
import matplotlib.pyplot as plt 
from scipy.integrate import solve_ivp

import matplotlib as mpl

# Edit the font, font size, and axes width
mpl.rcParams['font.family'] = 'Avenir'
plt.rcParams['font.size'] = 15
plt.rcParams['axes.linewidth'] = 2

# Referenced: http://web.pdx.edu/~gjay/teaching/mth271_2020/html/09_SEIR_model.html

def seiurf(t, y, b1, b2, d1, d2, g1, g2, d):
    '''
    Inputs: t is time; y is an array of arrays containing the seiurf information;
            b1, b2 are parameters describing the average number of contacts per day for symptomatic vs asymptomatic;
            g1, g2 are parameters describing the recovery rate for infected and undetected populations
            d1, d2 are the rate of exposed going to infected vs undetected
            d is the fatality rate
    
    '''
    s, e, i, u, r, f = y
    n = np.sum(y)

    return np.array([-b1*s*i/n - b2*s*(u+e)/n,
                     b1*s*i/n + b2*s*(u+e)/n - e*d1 - e*d2,
                     e*d1 - i*g1 - i*d,
                     e*d2 - u*g2,
                     i*g1 + u*g2,
                     i*d])

"""# Random guessing of parameters :("""

# initical conditions to test
n = 10000
y0 = np.array([n-1, 0, 1, 0, 0, 0])

# avg contact per unit of time
b1 = 1 
b2 = 1

# rate of conversion to infected and undetected over time
d1 = 1
d2 = 1

# recovery rate (on avg recover after 10 days)
g1 = 0.08
g2 = 0.1

# death rate
d = 0.002

# solutions (non-stiff)
sol = solve_ivp(seiurf, [0, 100], y0, args=(b1, b2, d1, d2, g1, g2, d), method = 'RK45')

# solutions (stiff)
# sol = solve_ivp(seiurf, [0, 100], y0, args=(b1, b2, d1, d2, g1, g2, d), method = 'Radau')

fig = plt.figure(); ax = fig.gca()
curves = ax.plot(sol.t, sol.y.T)
ax.legend(curves, ['S', 'E', 'I', 'U', 'R', 'F']);
ax.set_ylabel('Population');
ax.set_xlabel('Time');
ax.set_title('Evolution of Population (Deterministic)');

"""# Non-age stratified"""

# Parameters from stochastic model
nc1_lam = 1 # rate of contacts per day of exposed and undetected people (modelled by Poisson)
nc2_lam = 0.5 # rate of contacts per day of symptomatic infected people (modelled by Poisson)

incubate_time = 2 # days that incubation lasts (before an 'e' individual becomes 'i', symptomatic, or 'u', asymptomatic)

# generate uniform distribution (nearest integer)
min_infect = 5 # minimum number of days infected or undetected person (i.e. symptomatic or asymptomatic) is contagious
max_infect = 15 # maximum number of days infected or undetected person (i.e. symptomatic or asymptomatic) is contagious

# probabilities
p_e = 0.3     # prob of being exposed after contact 
p_i = 0.5   # prob of becoming symptomatic / infected
p_u = 1 - p_i # prob of becoming asymptomatic (undetected)
p_f = 3.3/100    # prob of a fatality (assuming only symptomatic individuals may die)

# initical conditions to test
n = 10000
y0 = np.array([n-1, 0, 1, 0, 0, 0])

# avg contact per day (times probability of becoming exposed)
b1 = nc1_lam * p_e 
b2 = nc2_lam * p_e

# avg per day (divide by 2 since incubation is 2 days)
d1 = p_i / incubate_time
d2 = p_u / incubate_time

# recovery rate (on avg recover after 10 days)
avg_recover = (max_infect + min_infect)/2 
g1 = (1 - p_f) / avg_recover 
g2 = 1 / avg_recover 

# death rate
d = p_f / avg_recover

print(b1, b2, d1, d2, g1, g2, d)

# solutions (non-stiff)
sol = solve_ivp(seiurf, [0, 90], y0, args=(b1, b2, d1, d2, g1, g2, d), method = 'RK45')

# solutions (stiff)
# sol = solve_ivp(seiurf, [0, 100], y0, args=(b1, b2, d1, d2, g1, g2, d), method = 'Radau')

fig = plt.figure(); ax = fig.gca()
curves = ax.plot(sol.t, sol.y.T)
ax.legend(curves, ['S', 'E', 'I', 'U', 'R', 'F']);
ax.set_ylabel('Population');
ax.set_xlabel('Time (days)');
ax.set_title('Evolution of Population (Deterministic)');

from numpy import diff

dydx = diff(sol.y[1])/diff(sol.t)

plt.plot(sol.t[:-1], dydx)

# Fatality
sol.y[5][-1]

# Percent of population infected
sol.y[0][-1]

"""# Age stratified attempt (disregard for now)"""

# initical conditions to test
n = 10000
y0 = np.array([n-1, 0, 1, 0, 0, 0])

p_e = 0.3

# avg contact per day (times probability of becoming exposed)
b1_child = 2 * p_e
b1_ya = 1.5 * p_e
b1_adult = 1 * p_e
b1_elderly = 0.8 * p_e
b2 = 0.5 * p_e

# avg per day (divide by 2 since incubation is 2 days)
d1_child = 0.2 / 2 # 0.4, 0.6, 0.8
d1_ya = 0.4 / 2
d1_adult = 0.6 / 2
d1_elderly = 0.8 / 2
d2_child = 1/2 - d1_child
d2_ya = 1/2 - d1_ya
d2_adult = 1/2 - d1_adult
d2_elderly = 1/2 - d1_elderly

# recovery rate (on avg recover after 10 days)
g1 = 1/10
g2 = 1/10

# death rate
d_child = 0.001 / 10
d_ya = 0.0025 / 10
d_adult = 0.0033 / 10
d_elderly = 0.013 / 10

# solutions (non-stiff)
sol_child = solve_ivp(seiurf, [0, 100], y0, args=(b1_child, b2, d1_child, d2_child, g1, g2, d_child), method = 'RK45')
sol_ya = solve_ivp(seiurf, [0, 100], y0, args=(b1_ya, b2, d1_ya, d2_ya, g1, g2, d_ya), method = 'RK45')
sol_adult = solve_ivp(seiurf, [0, 100], y0, args=(b1_adult, b2, d1_adult, d2_adult, g1, g2, d_adult), method = 'RK45')
sol_elderly = solve_ivp(seiurf, [0, 100], y0, args=(b1_elderly, b2, d1_elderly, d2_elderly, g1, g2, d_elderly), method = 'RK45')

# solutions (stiff)
# sol = solve_ivp(seiurf, [0, 100], y0, args=(b1, b2, d1, d2, g1, g2, d), method = 'Radau')

fig = plt.figure(); ax = fig.gca()
curves = ax.plot(sol_child.t, sol_child.y.T)
ax.legend(curves, ['S', 'E', 'I', 'U', 'R', 'F']);
ax.set_ylabel('Population');
ax.set_xlabel('Time (days)');
ax.set_title('Evolution of Population (Deterministic)\n Children');

fig = plt.figure(); ax = fig.gca()
curves = ax.plot(sol_ya.t, sol_ya.y.T)
ax.legend(curves, ['S', 'E', 'I', 'U', 'R', 'F']);
ax.set_ylabel('Population');
ax.set_xlabel('Time (days)');
ax.set_title('Evolution of Population (Deterministic)\n Young Adult');

fig = plt.figure(); ax = fig.gca()
curves = ax.plot(sol_adult.t, sol_adult.y.T)
ax.legend(curves, ['S', 'E', 'I', 'U', 'R', 'F']);
ax.set_ylabel('Population');
ax.set_xlabel('Time (days)');
ax.set_title('Evolution of Population (Deterministic)\n Adult');

fig = plt.figure(); ax = fig.gca()
curves = ax.plot(sol_elderly.t, sol_elderly.y.T)
ax.legend(curves, ['S', 'E', 'I', 'U', 'R', 'F']);
ax.set_ylabel('Population');
ax.set_xlabel('Time (days)');
ax.set_title('Evolution of Population (Deterministic)\n Elderly');